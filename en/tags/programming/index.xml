<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Programming on faultint</title>
    <link>/en/tags/programming/index.xml</link>
    <description>Recent content in Programming on faultint</description>
    <generator>Hugo -- 0.126.3</generator>
    <language>en</language>
    <lastBuildDate>Thu, 24 Oct 2024 19:36:18 +0700</lastBuildDate>
    <atom:link href="/en/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Replicating Right Click Behavior using Vanilla Javascript</title>
      <link>/en/posts/replicating-right-click-behavior-using-vanilla-javascript/</link>
      <pubDate>Thu, 24 Oct 2024 19:36:18 +0700</pubDate>
      <guid>/en/posts/replicating-right-click-behavior-using-vanilla-javascript/</guid>
      <description>The idea is simple.
First, disable the default event handler for right click in the browser.
Second, create a custom event handler for right click event.
Implementing the first idea, we can do something like the following.
window.addEventListener(&amp;#34;contextmenu&amp;#34;, (event) =&amp;gt; { event.preventDefault(); }); from here we can easily add any custom code for event handler to our liking, here I will just log &amp;ldquo;Right Click detected!&amp;rdquo; into the console.
window.addEventListener(&amp;#34;contextmenu&amp;#34;, (event) =&amp;gt; { event.</description>
    </item>
    <item>
      <title>Javascript Promise Simplified</title>
      <link>/en/posts/promise-simplified-js/</link>
      <pubDate>Mon, 21 Oct 2024 20:08:35 +0700</pubDate>
      <guid>/en/posts/promise-simplified-js/</guid>
      <description>Promise has three different states: pending, resolve, and reject.
When you first create a promise, it will be in pending state. This promise can be either &amp;ldquo;fulfilled&amp;rdquo; thus it will be resolved or it can be &amp;ldquo;rejected&amp;rdquo; thus it will be rejected.
In other word, if promise resulted in success it resolve, else it reject.
To create a promise in javascript is really simple.
const myPromise = new Promise(function (resolve, reject) { // do something }); What you do inside the promise will decide whether it will resolve or reject.</description>
    </item>
    <item>
      <title>Dummy File Watcher in C</title>
      <link>/en/posts/dummy-file-watcher-c/</link>
      <pubDate>Sat, 06 Jul 2024 18:59:44 +0700</pubDate>
      <guid>/en/posts/dummy-file-watcher-c/</guid>
      <description>In this article we will build a dummy file watcher using C programming language.
We say dummy file watcher because to build a proper file watcher, we need to utilize os internal features which is a bit more complex.
Instead, we will create an infinite loop that checks a given directory every 0.5 second and see if something has changed.
First thing we need to do is to create a function that tells if something has changed in a given directory.</description>
    </item>
    <item>
      <title>Review of Pointer in C</title>
      <link>/en/posts/pointer-of-c-review/</link>
      <pubDate>Wed, 03 Jul 2024 15:07:47 +0700</pubDate>
      <guid>/en/posts/pointer-of-c-review/</guid>
      <description>In this short article we will review pointers in C programming language, if you are new to this kind of topic please read the tutorial of pointers for beginners first, try this tutorial for example.
Defining Pointer There are several ways to define a pointer in C.
int* p; int x = 5; p = &amp;amp;x; // p pointer to address x we can assign the address right away like so</description>
    </item>
    <item>
      <title>Dynamic Array in C Simplified</title>
      <link>/en/posts/dynamic-array-in-c-simplified/</link>
      <pubDate>Tue, 02 Jul 2024 13:30:14 +0700</pubDate>
      <guid>/en/posts/dynamic-array-in-c-simplified/</guid>
      <description>Array data structure is really useful, it can used to to store value with same data types, we can access it really easy, updating the value of array is also a trivial thing to do. One of the most important use of array is that is it used to implement other more complex data structures such as linked list, binary tree and hash tables.
But what is greater that array? Yup, dynamic array.</description>
    </item>
    <item>
      <title>Keep Writing Code Until It Becomes Meaningless</title>
      <link>/en/posts/start-coding-small/</link>
      <pubDate>Mon, 24 Jun 2024 20:23:33 +0700</pubDate>
      <guid>/en/posts/start-coding-small/</guid>
      <description>If you are learning programming or computer science related stuff, chances are you will write some code. Coding and programming are two different things, in a nutshell, programming is applying some logic while coding is actually typing the applied logic into machine-readable instruction, read this awesome article from freeCodeCamp.
You can do programming wherever you are, you don&amp;rsquo;t have to sit in front of your computer since applying some logic don&amp;rsquo;t necessarily need a computer.</description>
    </item>
    <item>
      <title>Documenting Programming Journey with Web Development</title>
      <link>/en/posts/documenting-programming-journey-with-web-development/</link>
      <pubDate>Wed, 19 Jun 2024 13:01:22 +0700</pubDate>
      <guid>/en/posts/documenting-programming-journey-with-web-development/</guid>
      <description>Learning is a tiresome activity, you need to put a lot of effort and time when learning something, this is even true when learning something by yourself, like programming, since nobody is going to remind you when to study, when to review your note, when to exercise, what to study after you finished the current topic, in other word, you need to put extra effort because nobody is going to guide you whatsoever.</description>
    </item>
  </channel>
</rss>
